{
    "collab_server" : "",
    "contents" : "---\ntitle: \"R Basics\"\noutput: \n  learnr::tutorial:\n    progressive: TRUE\nruntime: shiny_prerendered\n---\n\n```{r setup, include=FALSE}\nlibrary(learnr)\n# library(checkr)\n# library(statPREP)\nlibrary(tibble)\nlibrary(ggformula)\nlibrary(mosaic)\ntheme_set(theme_bw())\n# knitr::opts_chunk$set(exercise.checker = checkr::checkr_tutor)\nknitr::opts_chunk$set(\n  echo = TRUE,\n  fig.align = \"center\",\n  fig.width = 6, fig.height = 2.5)\nbaseball <- read.csv(file='http://www.calvin.edu/~sld33/data/Baseball.csv')\ntutorial_options(exercise.eval = FALSE)\n```\n\n\n<style type=\"text/css\">\n  span.boxed {\n    border:5px solid gray;\n    border-radius:10px;\n    padding: 5px;\n  }\nspan.invboxed {\n  border:5px solid gray;\n  padding: 5px;\n  border-radius:10px;\n  color: white;\n}\n\ntable, td, th { border:0px; }\n\n/* cellpadding */\n  th, td { padding: 5px; }\n\n</style>\n\n## Communicating with R\n  You will do most of your work in R with *code* or *commands*. Instead of pointing and clicking, you will type one or more lines of code, which R will *execute* (doing the work you have asked it to do). Then, R will return the results of whatever operation you asked it to do - sometimes producing a plot, other times creating a plot. Sometimes executing code has almost no visible effect (no plot or text output is produced), but instead some object is created and stored in R's *environment* for later use.\n  \n###Two key questions\n  To get R (or any software) to do something for you,\nthere are two important questions you must be able to answer.  Before\ncontinuing, think about what those questions might be.\n  \n### The Questions\n\nTo get R (or any software) to do a job for you, there are two\nimportant questions you must be able to answer:\n  \n#### 1. What do you want the computer to do?\n  \n#### 2. What must the computer know in order to do that?\n  \n### Providing R with the information it needs\n  \n  R *functions* provide R with the answer to the first question: what do you want the computer to do?\n  \n  Most functions in R have short, but descriptive names that describe what they do.  For example, R has some functions to do basic mathematical operations:  the function `sqrt` computes the square root of a number, and the function `round` rounds a number (by default, it rounds to the nearest integer).\n  \n  But just giving R a function is not enough: you also need to answer the second question (what information does R need to do the job?). For example, if you want to use the function `round`, you also need to provide R with the number you want to round!\n  \n  We will provide answers to our two questions by filling in\nthe boxes of a basic template:\n  \n  <center>\n  <h2><strong><span class=\"boxed\">function</span> ( <span class=\"boxed\">&nbsp;information1&nbsp; , &nbsp;information2&nbsp; , ...)</strong> \n  </h2></center>\n  &nbsp;\n\n(The `...` indicates that there may be some additional *arguments* (input information we could provide to R) we could add\n  eventually. Some functions need only one input, but if a function takes more than one argument, they are separated by commas.)\n\n###Using simple functions\nLet's practice what you just learned, trying out the `sqrt` and `round` functions. \n\nEdit the code below to compute the square root of 64:\n```{r find-sqrt, exercise=TRUE}\nfunction(information_R_needs)\n```\n\nNow try computing the square root of 44, then rounding it to the nearest integer:\n\n```{r round-sqrt, exercise=TRUE}\nfunction1(information_R_needs)\nfunction2(information_R_needs)\n```\n\n### Storing information in R: variables\nIn the last section, you computed the square root of 44 and then rounded it, probably like this:\n\n```{r, echo=TRUE}\nsqrt(44)\nround(6.63325)\n```\n\nBut to do that, you probably had to first find the root, make a note of the result, and then provide that number to the `round` function.  What a pain!\n\nA better alternative, if you are computing a value that you will want to use later on, is to store it as a named variable in R.  In the previous example, you might want to store the square root of 44 in a variable called my_root; then you can provide my_root to the `round` function without checking the result of the `sqrt` calculation first:\n\n```{r naming-variable, echo=TRUE}\nmy_root <- sqrt(44)\nround(my_root)\n```\n\nNotice that to assign a name to the results of some R code, you use the symbol \"<-\". You can think of it as an *assignment arrow* -- it points from a result toward a name and assigns the name to the result.\n\nTry editing the code to change the name of the variable from my_root to something else, then run your new code:\n\n```{r name-a-variable, exercise=TRUE}\nmy_root <- sqrt(44)\nround(my_root)\n```\n\n### What if I have a list of numbers to store?\n\nSometime you might want to create a variable that contains more than one number.  You can use the function `c` to *concatenate* a list of numbers:\n\n```{r}\nmy_fave_numbers <- c(4, 44, 16)\nmy_fave_numbers\n```\n\n(First we stored the list of numbers, calling it my_fave_numbers; then we printed the results to the screen by simply typing the variable name my_fave_numbers).\n\nTry making a list of your three favorite numbers, then using the function `sum` to add them all up:\n\n```{r c-and-sum, exercise=TRUE}\n```\n\n```{r c-and-sum-hint, results='hide'}\nmy_numbers <- c(14, 27, 455)\nsum(my_numbers)\n```\n\n### What about data that are not numeric?\nR can work with categorical data as well as numeric data.  For example, we could create a list of words and store it as a variable if we wanted (feel free to try changing the words if you want):\n\n```{r cat-var, exercise=TRUE}\nmy_words <- c('RStudio', 'is', 'awesome')\nmy_words\n```\n\n### What if I have a LOT more data to store?\n`c` works great for creating small lists of just a few values, but it is not a good way to enter or store large data tables.  In R, these larger datasets are stored as objects called *data.frame*s.  The next sections will get you started using them. \n\n## How should data tables be organized for statistical analysis?\nA comprehensive guide to good practices for formatting data tables is available at <http://kbroman.org/dataorg/>.\n\nA few key points to keep in mind:\n\n- This data table is for the computer to read, not for humans! So eliminate formatting designed to make it \"pretty\" (colors, shading, fonts...)\n- Use short, simple variable names that do not contain any spaces or special characters (like ?, \\$, \\%, _, etc.)\n- Organize the table so there is one column for every variable, and one row for every observation (person/place/thing for which data were collected).\n- Use informative variable values rather than arbitrary numeric codes. For example, a variable Color should have values 'red', 'white', and 'blue' rather than 1, 2, and 3.\n\nYou will have chances to practice making your own data files and importing them into R outside this tutorial.\n\n## Using built-in datasets in R\n  R has a number of built-in datasets that are accessible to you as soon as you start RStudio.\n  \n  In addition to the datasets that are included with base R, there are add-on *packages* for R that contain additional software tools and sometimes datasets.  To use datasets contained in a package, you have to load the package by running the command library(packagename) (or equivalently, require(packagename)).  For example, we will practice looking at a dataset from the package `mosaic`. Before we can access the data, we have to load the package.  Edit the code below to load the `mosaic` package and then click \"run code\" to run it. (Nothing obvious will happen...but R will have access to the tools and data in the `mosaic` package once you run the code!)\n\n```{r require-package, echo = FALSE, exercise=TRUE}\nlibrary()\n```\n\n### Viewing a dataset\nThe mosaic package includes a dataset called HELPrct.\n\nIf you just enter the dataset name (HELPrct) as a command, R will print (most of) the dataset out to the screen:\n\n```{r}\nHELPrct\n```\n\nThat's not really useful...how can we extract selected, useful information about a dataset?\n\n\n### Gathering information about a dataset\n\nThere are a few functions that make it easier to take a quick look at a dataset:\n\n- `head` prints out the first few rows of the dataset.\n- `str` shows the *str*ucture of the dataset\n- `names` prints out the names of the variables (columns) in the dataset\n- `summary` prints out a summary of all the variables (columns) in the dataset\n- `nrow` reports the number of rows (observations or cases) in the dataset\n- `ncol` reports the number of columns (variables) in the dataset\n\nTry applying each of these functions to the HELPrct data and see what the output looks like each time:\n\n```{r check-out-data, exercise=TRUE}\nHELPrct\n```\n\n```{r check-out-data-hint, results='hide'}\nhead(HELPrct)\n```\n\n### Getting more help\nYou can get help related to R function, and built-in R datasets, using a special function: `?`.  Just type ? followed by the name of the function or dataset you want help on:\n\n```{r get-help, exercise=TRUE}\n\n```\n\n```{r get-help-hint, results='hide'}\n?HELPrct\n```\n\n\n## Reading in data from a file\nFor this class, you will often be asked to analyze data that is stored in files that are available online - usually in csv format. It's simple to read them into R. For example, we can read in the file Baseball.csv, which is stored at <http://www.calvin.edu/~sld33/data/Baseball.csv>:\n\n```{r}\nbaseball <- read.csv(file='http://www.calvin.edu/~sld33/data/Baseball.csv')\n```\n\n### What about local files?\nThe same function, `read.csv`, can be used to read in a local file.  You just need to change the input file from the URL (in quotes) to the file path and name (in quotes).  For example, the input file='http://www.calvin.edu/~sld33/data/Baseball.csv' might become file='C:\\\\Data\\\\Baseball.csv'.\n\nWe won't do an example in this tutorial because there isn't a way to work with local files within a tutorial environment, but you can practice it once you are working independently in RStudio.\n\n### Side note: named input arguments\nThe input argument we provided to R is the URL (in quotes -- either single or double quotes are fine).  But notice that this time, we gave the input argument a *name*, \"file\", and specified its value with an equal sign.\n\nThis is not *required* - the command works fine without it:\n\n```{r}\nbaseball <- read.csv('http://www.calvin.edu/~sld33/data/Baseball.csv')\n```\n\nHowever, if a function has *more than just one* input argument, it's good to get in the habit of providing names for the inputs.  If you provide names, then the order in which you list the inputs doesn't matter; without names, the order matters and you have to use ? to figure out what order R expects!\n\n### Your turn\nUse one of the functions you learned earlier to find out how many variables are in the baseball dataset, and what their names are. \n\n```{r baseball-info, exercise=TRUE}\n```\n\n```{r baseball-info-hint, results='hide', echo=FALSE}\nnames(baseball)\n```\n\n### Renaming variables in a dataset\n\nThose variable names are awful!  We can actually use `names` and `c` to assign replacement names, if we want.  Since the variable names are strings (words), they should be enclosed in quotes. Choose sensible new names for each variable and modify the code below to assign them to the baseball dataset.\n\n```{r, rename-baseball, exercise=TRUE}\nnames(baseball) <- c('new_name_1', 'new_name_2', ...)\n```\n\n### Check out the data\nFinally, use one of the functions you have learned so far to extract some information about the baseball dataset. *Remember, `?` won't work on baseball because it's not a built-in R dataset.*\n\n```{r look-at-baseball, exercise=TRUE}\n\n```\n\n## Review\n\nWhat have you learned so far?  More than you think!\n\n### Functions in R\nYou've learned that R code is made up of functions, which are generally named descriptively according to the job they do.  Functions have one or more input arguments, which is where you provide R with all the data and information it needs to do the job.  The syntax for calling a function uses the template:\n\n  <center>\n  <h2><strong><span class=\"boxed\">function</span> ( <span class=\"boxed\">&nbsp;information1&nbsp; , &nbsp;information2&nbsp; , ...)</strong> \n  </h2></center>\n  &nbsp;\n  \n  \n### Variables in R\nYou've practiced creating variables in R using `c`, and saving information (or the results of a computation) using the assignment arrow <-.  \n\n### Datasets in R\nYou've considered several different ways to get datasets to work with in R: you can use datasets that are built in to R or R packages, or you can use `read.csv` to read in data files stored in .csv format.\n\n",
    "created" : 1505319232408.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1382898570",
    "id" : "FCC4889E",
    "lastKnownWriteTime" : 1505319234,
    "last_content_update" : 1505319234237,
    "path" : "C:/Users/Stacy DeRuiter/Dropbox/CalvinTeaching/StatTutor/inst/tutorials/RBasics/RBasics.Rmd",
    "project_path" : "inst/tutorials/RBasics/RBasics.Rmd",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}