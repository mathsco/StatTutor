FUN=mean)
vars <- tapply(resid(RE4, type='response'),
INDEX=fitted.bins,
FUN=var)
gf_point(vars ~ means)
gf_point(vars ~ means) %>% gf_lims(y=c(0,5))
acf(resid(RE4, type='pearson'))
lm1 <- glm(n_buzzes ~ ODBA + exposure + dive_state +ind_size + sound_level +
time_of_day + group_size + water_depth ,
data=dives, family=poisson(link='log'))
acf(resid(lm1))
acf(resid(RE4))
tally(~individual, data=dives)
require(mosaic)
tally(~individual, data=dives)
names(dives)
30*median(~duration, data=dives)
?tapply
?gl
x <- dives$individual
ceiling(x/30)
length(x)/30
ceiling(length(x)/30)
unlist(tapply(X=dives$individual,
INDEX=dives$individual,
FUN=function(x) gl(n=ceiling(length(x)/30),
length=length(x))))
unlist(tapply(X=dives$individual,
INDEX=dives$individual,
FUN=function(x) gl(n=ceiling(length(x)/30),
k=30
length=length(x))))
unlist(tapply(X=dives$individual,
INDEX=dives$individual,
FUN=function(x) gl(n=ceiling(length(x)/30),
k=30,
length=length(x))))
dives$clusters <- unlist(tapply(X=dives$individual,
INDEX=dives$individual,
FUN=function(x) gl(n=ceiling(length(x)/30),
k=30,
length=length(x))))
head(dives$clusters, 40)
head(dives[,c('individual', 'clusters')], 40)
head(dives[,c('individual', 'clusters')], 70)
st <- getME(RE4)
st <- getME(RE4, name=c("theta","fixef"))
RE5 <- update(RE4,. ~ - (1|individual) + (1|individual/clusters), start=st,
control=glmerControl(optCtrl=list(maxfun=2e5)))
RE5 <- update(RE4,. ~ - (1|individual) + (1|individual/clusters),
start=st,
control=glmerControl(optCtrl=list(maxfun=2e5)))
RE5 <- update(RE4,. ~ - (1|individual) + (1|individual/clusters),
control=glmerControl(optCtrl=list(maxfun=2e5)))
RE5 <- glmer(n_buzzes ~ ODBA + exposure + dive_state +ind_size + sound_level +
time_of_day + group_size + water_depth + (1|individual/clusters),
data=dives, family=poisson(link='log'),
control=glmerControl(optimizer="bobyqa",
optCtrl=list(maxfun=2e4)))
RE5 <- glmer(n_buzzes ~ ODBA + exposure + dive_state +ind_size + sound_level_sc +
time_of_day + group_size + water_depth_sc + (1|individual/clusters),
data=dives, family=poisson(link='log'),
control=glmerControl(optimizer="bobyqa",
optCtrl=list(maxfun=2e6)))
acf(resid(RE5))
gf_point(resid(RE2, type='pearson') ~ fitted(RE2),
alpha=0.5) %>%
gf_labs(x='Fitted Values', y='Pearson Residuals')
gf_point(resid(RE5, type='pearson') ~ fitted(RE2),
alpha=0.5) %>%
gf_labs(x='Fitted Values', y='Pearson Residuals')
gf_point(resid(RE4, type='pearson') ~ fitted(RE2),
alpha=0.5) %>%
gf_labs(x='Fitted Values', y='Pearson Residuals')
gf_point(resid(RE5, type='pearson') ~ fitted(RE5),
alpha=0.5) %>%
gf_labs(x='Fitted Values', y='Pearson Residuals')
gf_point(resid(RE4, type='pearson') ~ fitted(RE4),
alpha=0.5) %>%
gf_labs(x='Fitted Values', y='Pearson Residuals')
require(s245)
pred_plot(RE5, 'dive_state')
devtools::install_github('stacyderuiter/s245')
require(s245)
pred_plot(RE5, 'dive_state')
class(RE5)
get_new_data
"lme4" %in% class(data)
"lme4" %in% class(RE5)
class(RE5)
50 - 0.3*50
?gf_jitter
require(ggformula)
?gf_jitter
gf_jitter(Petal.Length ~ Sepal.Width, data=iris, width=0.3)
gf_jitter(Petal.Length ~ Species, data=iris, width=0.3)
gf_jitter(Petal.Length ~ Species, data=iris, width=0.2)
gf_jitter(Petal.Length ~ Species, data=iris, width=0.2, size=2)
gf_jitter(Petal.Length ~ Species, data=iris, width=0.2, size=3)
gf_jitter(Petal.Length ~ Species, data=iris, width=0.2, size=4)
theme_set(theme_bw(base_size=16))
gf_jitter(Petal.Length ~ Species, data=iris, width=0.2, size=4)
require(mosaic)
require(ggformula)
knitr::opts_chunk$set(echo = TRUE)
set.seed(123)
GratefulHeart <- data.frame(grateful=gl(3,62,length=186, labels=c("low", "middle", 'high')))
GratefulHeart$inflam <- 246 - 0.17*c(rnorm(62,35,5), rnorm(62,38,5), rnorm(62,42,5))
gf_jitter(inflam ~ grateful, data = GratefulHeart)
?gf_jitter
gf_jitter(inflam ~ grateful, data = GratefulHeart, width=0.5)
gf_jitter(inflam ~ grateful, data = GratefulHeart, width=0.2)
gf_jitter(inflam ~ grateful, data = GratefulHeart, width=0.2) %>%
gf_point(mean(inflam|grateful, data=GratefulHeart) ~ grateful, data=GratefulHeart, color='red', size=4)
gf_jitter(inflam ~ grateful, data = GratefulHeart, width=0.2) %>%
gf_point(mean(~inflam|grateful, data=GratefulHeart) ~ grateful, data=GratefulHeart, color='red', size=4)
gf_jitter(inflam ~ grateful, data = GratefulHeart, width=0.2) %>%
gf_point(mean(~inflam|grateful, data=GratefulHeart) ~ grateful, data=GratefulHeart, color='red', size=4)
mean(~inflam|grateful, data=GratefulHeart)
gf_jitter(inflam ~ grateful, data = GratefulHeart, width=0.2) %>%
gf_point(mean(~inflam|grateful, data=GratefulHeart) ~ levels(grateful), data=GratefulHeart, color='red', size=4)
gf_jitter(inflam ~ grateful, data = GratefulHeart, width=0.2) %>%
gf_point(mean(~inflam|grateful, data=GratefulHeart) ~ levels(GratefulHeart$grateful), color='red', size=4)
gf_jitter(inflam ~ grateful, data = GratefulHeart, width=0.2) %>%
gf_point(group_means ~ levels(GratefulHeart$grateful), color='red', size=4)
group_means <- mean(~inflam|grateful, data=GratefulHeart)
gf_jitter(inflam ~ grateful, data = GratefulHeart, width=0.2) %>%
gf_point(group_means ~ levels(GratefulHeart$grateful), color='red', size=4)
gf_jitter(inflam ~ grateful, data = GratefulHeart, width=0.2) %>%
gf_point(group_means ~ levels(GratefulHeart$grateful))
gf_point(group_means ~ levels(GratefulHeart$grateful))
gf_jitter(inflam ~ grateful, data = GratefulHeart, width=0.2) %>%
gf_point(group_means ~ levels(GratefulHeart$grateful), color='red')
gf_jitter(inflam ~ grateful, data = GratefulHeart, width=0.2) %>%
gf_point(group_means ~ levels(GratefulHeart$grateful), size=4)
gf_jitter(inflam ~ grateful, data = GratefulHeart, width=0.2) %>%
gf_point(group_means ~ levels(GratefulHeart$grateful))
gf_point(group_means ~ levels(GratefulHeart$grateful), size=4)
gf_point(group_means ~ levels(GratefulHeart$grateful), size=4, color='red')
gf_point(group_means ~ levels(GratefulHeart$grateful), size=4, color='red', data=NULL)
gf_jitter(inflam ~ grateful, data = GratefulHeart, width=0.2) %>%
gf_point(group_means ~ levels(GratefulHeart$grateful), color='red', size=4, data=NULL)
?gf_point
overall_mean <- mean(~inflam, data=GratefulHeart)
mean(~inflam|grateful, data=GratefulHeart)
mean(~inflam, data=GratefulHeart)
gf_jitter(inflam ~ grateful, data = GratefulHeart, width=0.2)
WHO <- read.csv(file='http://www.calvin.edu/~sld33/data/WHOdata.csv')
require(mosaic)
require(ggformula)
gf_point(PopulationGrowthRate.Percent ~ FertilityRate,
data = WHO)  %>%
gf_labs(x='Fertility Rate',
y='Population Growth Rate\n(Percent)')
growfert <- lm(PopulationGrowthRate.Percent ~ FertilityRate, data = WHO)
coef(growfert)
summary(growfert)
#residuals vs fitted
gf_point(resid(growfert) ~ fitted(growfert))
#histogram of residuals
gf_dhistogram(~resid(growfert)) %>% gf_dist('norm')
#qq plot of residuals
qqnorm(resid(growfert))
qqline(resid(growfert))
qqnorm(resid(growfert))
qqline(resid(growfert))
#ACF plot of residuals
acf(resid(growfert))
summary(growfert)
summary(HIVmod)
hiv <- read.csv('C:\\Users\\sld33\\Dropbox\\CalvinTeaching\\STAT145\\Stat145Fall2015\\datasets\\BahamasHIVTrans.csv')
hiv <- read.csv('C:\\Users\\Stacy DeRuiter\\Dropbox\\CalvinTeaching\\STAT145\\Stat145Fall2015\\datasets\\BahamasHIVTrans.csv')
xyplot(Transmission.Rate ~ Year, data=hiv, ylab='Transmission Rate', cex=2, pch=19)
HIVmod <- lm(Transmission.Rate ~ Year, data=hiv)
summary(HIVmod)
?glm
?nlme::gls
?lmer
?lme4::lmer
knitr::opts_chunk$set(echo = TRUE)
?varClasses
?nlme::varClasses
d <- rgamma(500, 1,4)
require(ggformula)
require(mosaic)
d <- rgamma(500, 1,4)
gf_histogram(d)
require(ggformula)
require(mosaic)
d <- data.frame(orig=rgamma(500, 1,4))
d$log <- log10(d$orig)
gf_histogram(d)
gf_histogram(~orig, data=d)
require(ggformula)
require(mosaic)
d <- data.frame(orig=rgamma(500, 1,4))
d$log <- log10(d$orig)
gf_histogram(~orig, data=d)
gf_histogram(~log, data=d)
require(ggformula)
require(mosaic)
d <- data.frame(orig=rgamma(500, 1,4))
d$log <- log(d$orig)
gf_histogram(~orig, data=d) %>%
gf_labs(x='Untransformed Residuals')
gf_histogram(~log, data=d) %>%
gf_labs(x='log10-transformed Residuals')
require(ggformula)
require(mosaic)
d <- data.frame(orig=rgamma(500, 1,4))
d$log <- log10(d$orig)
gf_histogram(~orig, data=d) %>%
gf_labs(x='Untransformed Residuals')
gf_histogram(~log, data=d) %>%
gf_labs(x='log10-transformed Residuals')
require(ggformula)
require(mosaic)
d <- data.frame(orig=rgamma(500, 1,3))
d$log <- log10(d$orig)
gf_histogram(~orig, data=d) %>%
gf_labs(x='Untransformed Residuals')
gf_histogram(~log, data=d) %>%
gf_labs(x='log10-transformed Residuals')
require(ggformula)
require(mosaic)
d <- data.frame(orig=rgamma(500, 1,2))
d$log <- log10(d$orig)
gf_histogram(~orig, data=d) %>%
gf_labs(x='Untransformed Residuals')
gf_histogram(~log, data=d) %>%
gf_labs(x='log10-transformed Residuals')
require(ggformula)
require(mosaic)
d <- data.frame(orig=rgamma(500, 1,1))
d$log <- log10(d$orig)
gf_histogram(~orig, data=d) %>%
gf_labs(x='Untransformed Residuals')
gf_histogram(~log, data=d) %>%
gf_labs(x='log10-transformed Residuals')
d$sqrt <- sqrt(d$orig)
require(ggformula)
require(mosaic)
d <- data.frame(orig=rgamma(500, 1,1))
d$log <- log10(d$orig)
d$sqrt <- sqrt(d$orig)
gf_histogram(~orig, data=d) %>%
gf_labs(x='Untransformed Residuals')
gf_histogram(~log, data=d) %>%
gf_labs(x='Log10-transformed Residuals')
gf_histogram(~sqrt, data=d) %>%
gf_labs(x='Square-root-transformed Residuals')
knitr::opts_chunk$set(echo = TRUE, message=FALSE)
require(mosaic)
require(ggformula)
theme_set(theme_bw(base_size=14))
gf_histogram(~sqrt, data=d) %>%
gf_labs(x='Square-root\ntransformedResiduals')
?MuMIn::model.avg
require(s245)
?para_boot
require(faraway)
head(epilepsy)
3.5*13
require(mosaic)
mean(~Sepal.Width, data=iris)
mean(iris$Sepal.Width)
mean(~Sepal.Width, data=iris)
?mean_
0.94*35
0.06*35
sqrt(0.5*0.5/35)
0.32*35
?mean
recover.points <- function(test.percent, ec.score){}
recover.points <- function(test.percent, ec.score){
new.score <- test.percent + (100-test.percent)*(ec.score/30)*(0.3)}
recover.points(82.93, 16)
recover.points <- function(test.percent, ec.score){
new.score <- test.percent + (100-test.percent)*(ec.score/30)*(0.3); return(new.score)}
recover.points(82.93, 16)
recover.points(73.53, 30)
recover.points(64.71, 30)
30/7
nerds <- read.csv('http://www.calvin.edu/~sld33/data/nerds.csv')
require(ggformula)
gf_histogram(~score | gender, data=nerds)
recover.points(86.2, 24)
recover.points(86.76, 30)
recover.points(88.24, 29)
recover.points(90.79, 29)
recover.points(92.68, 30)
recover.points(87.5, 27)
recover.points(76.83, 28)
recover.points(82.9, 27.5)
recover.points(64.71, 27.5)
recover.points(86.59, 26.5)
dnorm(4.48, 0, 3.756)
(1/(3.756*sqrt(2*pi)))*exp(-0.5*(4.48/3.756)^2)
0.93/0.07
0.932/(1-0.932)
2.5 + 18 + 18 + 20 + 13 + 14
0.85*15
12.5/15
require(faraway)
epilepsy$sw <- epilepsy$seizures/epilepsy$timeadj
mean(epilepsy$sw)
mean(epilepsy$seizures)
m <- lm(seizures ~ 1 + offset(log(timeadj)), data=epilepsy, family=quasipoisson(link='log'))
m <- glm(seizures ~ 1 + offset(log(timeadj)), data=epilepsy, family=quasipoisson(link='log'))
predict(m)
5 + 18.5 + 18 + 20.5 + 14 + 12.5
2.5 + 16 + 20 + 20
require(mgcv)
?anova.gam
require(geepack)
?geeglm
73-56
population.drf
population.drg
populationgrowth <- lm(PopulationGrowthRate.Percent ~ Continent + GrossIncomePerPerson + Population.Thousands + UrbanPopulation.Percent + MedianAge + FertilityRate + GovernmentExpenditureOnHealthPerCapita + TaxRevenue.PercentOfGDP, data = WHOdata)
WHOdata <- read.csv('http://www.calvin.edu/~sld33/data/WHOdata.csv')
populationgrowth <- lm(PopulationGrowthRate.Percent ~ Continent + GrossIncomePerPerson + Population.Thousands + UrbanPopulation.Percent + MedianAge + FertilityRate + GovernmentExpenditureOnHealthPerCapita + TaxRevenue.PercentOfGDP, data = WHOdata)
summary(populationgrowth)
vif(populationgrowth)
acf(resid(populationgrowth))
histogram(resid(populationgrowth))
require(mosaic)
require(ggplot2)
require(lattice)
require(car)
require(MuMIn)
require(forcats)
require(ggformula)
# Some customization.  You can alter or delete as desired (if you know what you are doing).
trellis.par.set(theme=theme.mosaic()) # change default color scheme for lattice
knitr::opts_chunk$set(
tidy=FALSE,     # display code as typed
size="small")   # slightly smaller font for code
populationgrowth <- lm(PopulationGrowthRate.Percent ~ Continent + GrossIncomePerPerson + Population.Thousands + UrbanPopulation.Percent + MedianAge + FertilityRate + GovernmentExpenditureOnHealthPerCapita + TaxRevenue.PercentOfGDP, data = WHOdata)
summary(populationgrowth)
vif(populationgrowth)
acf(resid(populationgrowth))
histogram(resid(populationgrowth))
xyplot(resid(populationgrowth)~fitted(populationgrowth))
populationgrowth <- update(populationgrowth, na.action='na.fail')
population.drg <- dredge(populationgrowth)
population.drf
population.drg
head(population.drg)
0.96*150
0.965*150
0.875*150
setwd("C:/Users/Stacy DeRuiter/Dropbox/CalvinTeaching/StatTutor/inst/tutorials/RmdDataIO")
library(learnr)
# library(checkr)
# library(statPREP)
library(tibble)
library(ggformula)
library(mosaic)
theme_set(theme_bw())
# knitr::opts_chunk$set(exercise.checker = checkr::checkr_tutor)
knitr::opts_chunk$set(
echo = TRUE,
fig.align = "center",
fig.width = 6, fig.height = 2.5)
baseball <- read.csv(file='http://www.calvin.edu/~sld33/data/Baseball.csv')
tutorial_options(exercise.eval = FALSE)
baseball <- read.csv('http://www.calvin.edu/~sld33/data/Baseball.csv')
baseball <- read.csv('http://www.calvin.edu/~sld33/data/Baseball.csv')
require(mosaic)
require(ggformula)
require(faraway)
knitr::opts_chunk$set(echo = TRUE)
brand_n <- as.numeric(tally(~brand_name, data=merc))
library(learnr)
# library(checkr)
# library(statPREP)
library(tibble)
library(ggformula)
library(ggthemes)
library(mosaic)
library(NHANES)
theme_set(theme_bw())
# data(Births78, package = "mosaicData")
# Births78 <- Births78 %>% mutate(date = as.Date(date))
data(Births, package = "mosaicData")
data(NHANES, package = "NHANES")
for (y in unique(Births$year)) {
assign(paste0("Births",y),  Births %>%
dplyr::filter(year == y))
}
Births1978 <- Births %>%
dplyr::filter(year == 1978)
data(Galton, package = "mosaicData")
# knitr::opts_chunk$set(exercise.checker = checkr::checkr_tutor)
D <- data.frame(
group = LETTERS[1:3],
count = c(20, 25, 18)
)
knitr::opts_chunk$set(
echo = FALSE,
fig.align = "center",
fig.width = 6, fig.height = 2.5)
names(Galton)
head(Galton)
nrow(Galton)
gf_point(height ~ sex, data=Galton)
gf_point(height ~ sex, data=Galton, alpha=0.3)
gf_point(height ~ sex, data=Galton, alpha=0.1)
gf_jitter(height ~ sex, data=Galton, alpha=0.3)
gf_jitter(height ~ sex, data=Galton, alpha=0.5)
?gf_jitter
?geom_jitter
gf_jitter(height ~ sex, data=Galton, alpha=0.5, width=0.25)
gf_jitter(height ~ sex, data=Galton, alpha=0.5, width=0.5)
head(baseball)
head(iris)
gf_jitter(Petal.Width ~ Species, data=iris)
gf_jitter(Petal.Width ~ Species, data=iris, width=0.3, color=~Species)
gf_jitter(Petal.Width ~ Species, data=iris, width=0.3,
color=~Species, alpha=0.4)
rmarkdown::shiny_prerendered_clean('C:/Users/Stacy DeRuiter/Dropbox/CalvinTeaching/StatTutor/inst/tutorials/AdvancedPlotting/AdvancedPlotting.Rmd')
gf_boxplot(height ~ sex, data=Galton)
gf_violin(height ~ sex, data=Galton)
gf_boxplot(height ~ sex, data=Galton) %>%
gf_jitter(alpha=0.3)
gf_boxplot(height ~ sex, data=Galton) %>%
gf_jitter(alpha=0.2)
gf_boxplot(height ~ sex, data=Galton) %>%
gf_jitter(alpha=0.2, width=0.1)
gf_boxplot(height ~ sex, data=Galton) %>%
gf_jitter(alpha=0.2, width=0.3)
gf_boxplot(height ~ sex, data=Galton) %>%
gf_jitter(alpha=0.2, width=0.35)
gf_boxplot(height ~ sex, data=Galton) %>%
gf_jitter(alpha=0.2, width=0.35, color='grey')
gf_boxplot(height ~ sex, data=Galton) %>%
gf_jitter(alpha=0.2, width=0.35, color='grey34')
gf_boxplot(height ~ sex, data=Galton) %>%
gf_jitter(alpha=0.4, width=0.35, color='grey34')
gf_boxplot(height ~ sex, data=Galton) %>%
gf_jitter(alpha=0.3, width=0.35, color='grey34')
gf_boxplot(height ~ sex, data=Galton) %>%
gf_jitter(alpha=0.3, width=0.3, color='grey34')
gf_boxplot(height ~ sex, data=Galton) %>%
gf_jitter(alpha=0.2, width=0.3, color='grey34')
gf_violin(height ~ sex, data=Galton) %>%
gf_jitter(alpha=0.2, width=0.3, color='grey34')
?gf_area
?gf_contour
head(Births1970)
gf_contour(births ~ month + day_of_week, data=Births1978)
gf_contour(births ~ month + wday, data=Births1978)
head(Births1978, 20)
gf_contour(births ~ month + day, data=Births1978)
gf_contour(births ~ day + month, data=Births1978)
?geom_contour
gf_contour(births ~ day + month, data=Births1978, legend=TRUE)
gf_contour(births ~ day + month, data=Births1978, show.legend=TRUE)
gf_contour(births ~ day + month, data=Births1978, color=..level..)
gf_density(births ~ day + month, data=Births1978)
gf_raster(births ~ day + month, data=Births1978)
gf_raster(births ~ day + month, data=Births1978) %>%
gf_contour()
gf_raster(births ~ day + month, data=Births1978)
?gf_raster
gf_raster(month ~ day, fill=~births, data=Births1978)
gf_raster(month ~ day, fill=~births, data=Births1978) %>%
gf_contour(births ~ day + month, data=Births1978, color='white')
?gf_density2d
gf_density2d(i1 ~ age, data = HELPrct)
?gf_errorbar
?gf_tile
EIA <- read.csv('http://www.calvin.edu/~sld33/data/EIA.csv')
gf_raster(ycode ~ xcode, fill=~count, data=EIA)
gf_raster(ycode ~ xcode, fill=~log(count), data=EIA)
gf_raster(ycode ~ xcode, fill=~log(count+1), data=EIA)
head(NHANES)
names(NHANES)
gf_bar(~Education, data=NHANES)
gf_bar(~Education, data=NHANES)
my_plot <- gf_bar(~Education, data=NHANES)
my_plot + coord_flip()
gf_bar(~Education, data=NHANES) %>%
gf_theme(axis.text.x=element_text(angle=65, hjust=1))
gf_bar(~Education, data=NHANES) %>%
gf_theme(axis.text.x=element_text(angle=65, hjust=-1))
head(NHANES)
View(NHANES)
levels(NHANES$Work)
levels(NHANES$BMI_WHO)
mmr <- read.csv('http://www.calvin.edu/~sld33/data/MammalMetabolicRates.csv')
gf_bar(~Order, data=mmr)
gf_bar(~Order, data=mmr) + coord_flip()
gf_bar(~Education, data=NHANES) + coord_flip()
gf_bar(~Order, data=mmr) + coord_flip()
gf_bar(~Order, data=mmr) %>%
gf_theme(axis.text.x=element_text(angle=65, hjust=-1))
gf_bar(~Order, data=mmr) %>%
gf_theme(axis.text.x=element_text(angle=65, hjust=1))
ggpairs(baseball)
ggpairs(baseball)
gf_theme(axis.text.x=element_text(angle=65, hjust=1))require()
require(GGally)
ggpairs(baseball)
ggpairs(Galton)
head(faithful)
head(cars)
data("flea")
head(flea)
ggpairs(flea)
ggpairs(iris)
